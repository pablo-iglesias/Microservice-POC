/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.3/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'

// Apply the application plugin to add support for building an application
apply plugin: 'application'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // The production code uses Guava
    compile 'com.google.guava:guava:20.0'

    // Use JUnit for test framework
    testCompile 'junit:junit:4.12'
    
    // Use Mockito for mocking framework
    testCompile "org.mockito:mockito-core:2.0.57-beta"
    
    // Add Sqlite support
    compile 'org.xerial:sqlite-jdbc:3.7.2'

    // Add MySQL support
    compile 'mysql:mysql-connector-java:5.1.6'

    // Add MongoDB support
    compile 'org.mongodb:mongo-java-driver:3.5.0'

    // Use Jtwig for template engine
    compile "org.jtwig:jtwig-core:5.75"
    
    // Use gson for JSON parser
    compile "com.google.code.gson:gson:2.8.0"
    
    // Use jaxb for XML parser
    compile "javax.xml:jaxb-api:2.1"    
    
    // Additional dependence for preventing a little problem with Jtwig
    compile "org.slf4j:slf4j-jdk14:1.7.12"
    
    // Library for working with named regular expression groups
    compile "com.github.tony19:named-regexp:0.2.4"
}

// Define the main class for the application
mainClassName = 'App'

jar {
  manifest {
    attributes(
      'Main-Class': 'App',
      'Class-Path': 'libs/' + configurations.runtime.files.collect { it.name }.join(' libs/')
    )
  }
  from('templates') {
      include  '**/*.html'
      into 'templates'
  }
  from('sql') {
      include  '**/*.sql'
      into 'sql'
  }
  from('mongo') {
      include  '**/*.dump'
      into 'mongo'
  }
}

// Copy templates and sqls to bin directory for debugging the app with those resources available
task copyTemplates << {
    copy {
        from "$projectDir/templates"
        into "$buildDir/classes/main/templates" // IntelliJ
    }

    copy {
        from "$projectDir/templates"
        into "$projectDir/bin/templates"        // Eclipse
    }
}

task copySqls << {
    copy {
        from "$projectDir/sql"
        into "$buildDir/classes/main/sql"       // IntelliJ
    }

    copy {
        from "$projectDir/sql"
        into "$projectDir/bin/sql"              // Eclipse
    }
}

task copyMongos << {
    copy {
        from "$projectDir/mongo"
        into "$buildDir/classes/main/mongo"      // IntelliJ
    }

    copy {
        from "$projectDir/mongo"
        into "$projectDir/bin/mongo"             // Eclipse
    }
}

// Copy jar file to the jar folder and all runtime dependencies to the jar/libs subfolder
task deployJar(type: Copy) {
	into "$buildDir/jar"
    from jar.archivePath
}
task deployDependencies(type: Copy) {
    into "$buildDir/jar/libs"
    from configurations.runtime
}

jar.finalizedBy([copyTemplates, copySqls, copyMongos, deployJar, deployDependencies])

